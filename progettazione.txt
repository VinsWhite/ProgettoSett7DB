In questo file è possibile trovare una spiegazione del progetto.

MODELLO CONCETTUALE
Individuiamo 3 entità: Users, Courses, Activities

Entità: Users
id (PK)
name (nome dell'utente)
email (email dell'utente, unica)
email_verified_at (timestamp per la verifica dell'email, opzionale)
password (password dell'utente)
role (ruolo dell'utente)
rememberToken (token per la persistenza della sessione)
created_at (timestamp di creazione)
updated_at (timestamp di aggiornamento)

Entità: Courses
id (PK)
name (nome del corso)
description (descrizione del corso)
capacity (capacità massima del corso)
created_at (timestamp di creazione)
updated_at (timestamp di aggiornamento)

Entità: Activities
id (PK)
name (nome dell'attività)
description (descrizione dell'attività)
start_time (orario di inizio dell'attività)
end_time (orario di fine dell'attività)
course_id (chiave esterna che collega l'attività al corso)
created_at (timestamp di creazione)
updated_at (timestamp di aggiornamento)

Tabella generata dalla relazione di courses con users
id (PK)
status (stato della prenotazione)
course_id (chiave esterna che collega la prenotazione al corso)
user_id (chiave esterna che collega la prenotazione all'utente)
created_at (timestamp di creazione)
updated_at (timestamp di aggiornamento)


SPIEGAZIONE GENERALE 
L'utente potrà visualizzare tutte le attività in una pagina dedicata. 
Potrà prenotare dei corsi che richiederanno un controllo da parte di un admin.
L'admin "ha potere" decisionale e potrà anche eseguire azioni normalmente non eseguibili da un utente normale come la creazione di nuovi corsi.

PROBLEMI RISCONTRATI 
Il progetto era pressoché semplice, ho riscontrato problemi solo in reservation.updated che mi 
ha fatto perdere più tempo del previsto e quindi non sono riuscito a concentrarmi sul resto dovendomi dedicare
ad altri progetti.